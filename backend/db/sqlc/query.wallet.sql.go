// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.wallet.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addWallet = `-- name: AddWallet :one
INSERT INTO wallet (wallet_id, account_id, balance)
VALUES (DEFAULT, $1, 0)
RETURNING wallet_id, account_id, balance
`

func (q *Queries) AddWallet(ctx context.Context, accountID sql.NullString) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, addWallet, accountID)
	var i Wallet
	err := row.Scan(&i.WalletID, &i.AccountID, &i.Balance)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM wallet
WHERE account_id = $1
`

func (q *Queries) GetBalance(ctx context.Context, accountID sql.NullString) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getBalance, accountID)
	var balance sql.NullInt32
	err := row.Scan(&balance)
	return balance, err
}

const getWalletID = `-- name: GetWalletID :one
SELECT wallet_id FROM wallet
WHERE account_id = $1
`

func (q *Queries) GetWalletID(ctx context.Context, accountID sql.NullString) (string, error) {
	row := q.db.QueryRowContext(ctx, getWalletID, accountID)
	var wallet_id string
	err := row.Scan(&wallet_id)
	return wallet_id, err
}

const topUp = `-- name: TopUp :one
UPDATE wallet
SET balance = balance + $2
WHERE wallet_id = $1
RETURNING wallet_id, account_id, balance
`

type TopUpParams struct {
	WalletID string        `json:"wallet_id"`
	Amount sql.NullInt32 `json:"amount"`
}

func (q *Queries) TopUp(ctx context.Context, arg TopUpParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, topUp, arg.WalletID, arg.Amount)
	var i Wallet
	err := row.Scan(&i.WalletID, &i.AccountID, &i.Balance)
	return i, err
}
