// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.account.sql

package sqlc

import (
	"context"
	"database/sql"
)

const accountSubscribe = `-- name: AccountSubscribe :one
UPDATE account SET is_subscribe = true WHERE account_id = $1
RETURNING is_subscribe
`

func (q *Queries) AccountSubscribe(ctx context.Context, accountID string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, accountSubscribe, accountID)
	var is_subscribe sql.NullBool
	err := row.Scan(&is_subscribe)
	return is_subscribe, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  username, email, password_hash
) VALUES (
  $1, $2, $3
)
RETURNING account_id, username, email, password_hash, created_at, is_subscribe
`

type CreateAccountParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Username, arg.Email, arg.PasswordHash)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsSubscribe,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, username, email, password_hash, created_at, is_subscribe FROM account
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsSubscribe,
	)
	return i, err
}

const getAccountbyEmail = `-- name: GetAccountbyEmail :one
SELECT account_id, username, email, password_hash, created_at, is_subscribe FROM account
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAccountbyEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountbyEmail, email)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsSubscribe,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one
SELECT email FROM account 
WHERE email = $1
`

func (q *Queries) GetEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmail, email)
	err := row.Scan(&email)
	return email, err
}

const getHashedPassword = `-- name: GetHashedPassword :one
SELECT password_hash FROM account 
WHERE email = $1
`

func (q *Queries) GetHashedPassword(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getHashedPassword, email)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}
